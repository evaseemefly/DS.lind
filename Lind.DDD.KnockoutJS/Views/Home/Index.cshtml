@{
    ViewBag.Title = "主页";
}
@model List<Lind.DDD.KnockoutJS.Controllers.Product>

<img src="/home/chart?type=@Request.QueryString["type"]" />
<img src="/home/dataChart?type=@Request.QueryString["type"]" />


<table class="listTbl">
    <thead>
        <tr>
            <th>编号</th>
            <th>姓名</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody data-bind="template: { name: 'list', foreach: PeopleList }">
    </tbody>
</table>




<script type="text/html" id="list">
    <tr>
        <td><span data-bind="text: ID"></span></td>
        <td><span data-bind="text: Name"></span>
        </td>
        <td><a href="javascript:void(0)" data-bind="click: $parent.remove">删除</a>
            <a href="javascript:void(0)" data-bind="click: $parent.edit">编辑</a>
            <input type="checkbox" data-bind="value: ID" />
        </td>
    </tr>
</script>
<table class="detailTbl" data-bind="with: selectItem, visible: editing">
    <tr>
        <td colspan="2">
            <h3>正在<span data-bind="if: ID == 0">新建</span><span data-bind="    if: ID > 0">编辑</span></h3>
        </td>
    </tr>
    <tr>
        <td>姓名： 
        </td>
        <td>
            <input type="text" data-bind="value: Name" /></td>
    </tr>

    <tr>
        <td colspan="2">
            <input type="button" data-bind="click: $parent.save" value="保存" />
            <input type="button" data-bind="click: $parent.cancle" value="取消" /></td>
    </tr>
</table>
<p>
    <input type="button" data-bind="click: add" value="添加一个" />
    <input type="button" data-bind="click: delMore" value="删除多个" />

</p>
<script type="text/ecmascript">

    var People = function () {
        //这里用self会影响到model方法里的self
        var self = this;
        self.ID = 0;
        self.Name = "";
    }

    var model = function () {
        var self = this;
        self.remove = function (o) {
            self.PeopleList.remove(o);
        };
        self.selectItem = ko.observable();
        self.editing = ko.observable(false);

        self.add = function (o) {
            self.editing(true);
            self.selectItem(new People());
        }

        self.edit = function (o) {
            self.editing(true);
            self.selectItem(o);
        }

        self.selectItem.subscribe(function (o) {

            console.log("要编辑记录ID是" + o.ID);
        });

        self.save = function (o) {
            var index = 0;
            var isNew = true;
            for (var i in self.PeopleList()) {
                if (self.PeopleList()[i].ID == o.ID) {//找到原来数据的索引位置
                    index = i;
                    console.log(self.PeopleList()[i].ID);
                    isNew = false;
                    break;
                }
            }
            if (isNew) {
                self.PeopleList.push(o);
            } else {
                //删除原来的
                self.PeopleList.remove(o);
                //在指定位置添加
                self.PeopleList.splice(i, 0, o);
            }
            self.editing(false);
        }

        self.cancle = function () {
            self.editing(false);
        }

        self.delMore = function () {
            var selValue = '';
            var arr = $('input[type=checkbox]:checked');
            if (arr == 0)
                alert("请选择至少一项");

            for (var i = 0; i < arr.length; i++)
                selValue += arr[i].value + ",";

            alert("删除这些记录[" + selValue + "]");
        }


    }
    //扩展方法
    model.prototype.alert2 = function (msg) {
        alert("重写model的alert方法：" + msg);
    }

    //ＭＶＶＭ数据绑定
    var MyModel = new model();
    $.when(
        $.ajax({
        url: "/home/GetProduct",
        dataType: "JSON",
        type: "GET",
        success: function (data) {
            MyModel.PeopleList = ko.observableArray(data);//先为对象赋值
        }
        })).done(function (data) {
            console.log(data);
        ko.applyBindings(MyModel);//再绑定对象
    });



</script>
